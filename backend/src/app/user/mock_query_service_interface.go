// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baron7151/praha-ddd-go/src/app/user (interfaces: IUserDataQS)

// Package queryservice is a generated GoMock package.
package appuser

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserDataQS is a mock of IUserDataQS interface.
type MockIUserDataQS struct {
	ctrl     *gomock.Controller
	recorder *MockIUserDataQSMockRecorder
}

// MockIUserDataQSMockRecorder is the mock recorder for MockIUserDataQS.
type MockIUserDataQSMockRecorder struct {
	mock *MockIUserDataQS
}

// NewMockIUserDataQS creates a new mock instance.
func NewMockIUserDataQS(ctrl *gomock.Controller) *MockIUserDataQS {
	mock := &MockIUserDataQS{ctrl: ctrl}
	mock.recorder = &MockIUserDataQSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserDataQS) EXPECT() *MockIUserDataQSMockRecorder {
	return m.recorder
}

// FindAllUsers mocks base method.
func (m *MockIUserDataQS) FindAllUsers() ([]UserDataDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllUsers")
	ret0, _ := ret[0].([]UserDataDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllUsers indicates an expected call of FindAllUsers.
func (mr *MockIUserDataQSMockRecorder) FindAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllUsers", reflect.TypeOf((*MockIUserDataQS)(nil).FindAllUsers))
}

// FindByUserName mocks base method.
func (m *MockIUserDataQS) FindByUserName(arg0 string) ([]UserDataDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserName", arg0)
	ret0, _ := ret[0].([]UserDataDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserName indicates an expected call of FindByUserName.
func (mr *MockIUserDataQSMockRecorder) FindByUserName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserName", reflect.TypeOf((*MockIUserDataQS)(nil).FindByUserName), arg0)
}
