// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baron7151/praha-ddd-go/src/domain/user (interfaces: IUserRepository)

// Package userrepository is a generated GoMock package.
package mock_userrepository

import (
	reflect "reflect"
	domainuser "github.com/baron7151/praha-ddd-go/src/domain/user"
	domaincommon "github.com/baron7151/praha-ddd-go/src/domain/common"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIUserRepository) Exists(arg0 domaincommon.Email) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIUserRepositoryMockRecorder) Exists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIUserRepository)(nil).Exists), arg0)
}

// FindByEmail mocks base method.
func (m *MockIUserRepository) FindByEmail(arg0 domaincommon.Email) (domainuser.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", arg0)
	ret0, _ := ret[0].(domainuser.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockIUserRepositoryMockRecorder) FindByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockIUserRepository)(nil).FindByEmail), arg0)
}

// FindByManyUserIds mocks base method.
func (m *MockIUserRepository) FindByManyUserIds(arg0 []domaincommon.BaseUUID) ([]domainuser.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByManyUserIds", arg0)
	ret0, _ := ret[0].([]domainuser.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByManyUserIds indicates an expected call of FindByManyUserIds.
func (mr *MockIUserRepositoryMockRecorder) FindByManyUserIds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByManyUserIds", reflect.TypeOf((*MockIUserRepository)(nil).FindByManyUserIds), arg0)
}

// FindByPairId mocks base method.
func (m *MockIUserRepository) FindByPairId(arg0 domaincommon.BaseUUID) ([]domainuser.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPairId", arg0)
	ret0, _ := ret[0].([]domainuser.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPairId indicates an expected call of FindByPairId.
func (mr *MockIUserRepositoryMockRecorder) FindByPairId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPairId", reflect.TypeOf((*MockIUserRepository)(nil).FindByPairId), arg0)
}

// FindByTeamId mocks base method.
func (m *MockIUserRepository) FindByTeamId(arg0 domaincommon.BaseUUID) ([]domainuser.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTeamId", arg0)
	ret0, _ := ret[0].([]domainuser.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTeamId indicates an expected call of FindByTeamId.
func (mr *MockIUserRepositoryMockRecorder) FindByTeamId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTeamId", reflect.TypeOf((*MockIUserRepository)(nil).FindByTeamId), arg0)
}

// FindByUserId mocks base method.
func (m *MockIUserRepository) FindByUserId(arg0 domaincommon.BaseUUID) (domainuser.UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", arg0)
	ret0, _ := ret[0].(domainuser.UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockIUserRepositoryMockRecorder) FindByUserId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockIUserRepository)(nil).FindByUserId), arg0)
}

// Save mocks base method.
func (m *MockIUserRepository) Save(arg0 domainuser.UserEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIUserRepositoryMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIUserRepository)(nil).Save), arg0)
}
