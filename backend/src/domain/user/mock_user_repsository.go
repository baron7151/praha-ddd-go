// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/user/user_repository.go

// Package mock_domainuser is a generated GoMock package.
package domainuser

import (
	reflect "reflect"

	domaincommon "github.com/baron7151/praha-ddd-go/src/domain/common"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockIUserRepository) Exists(email domaincommon.Email) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockIUserRepositoryMockRecorder) Exists(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIUserRepository)(nil).Exists), email)
}

// FindByEmail mocks base method.
func (m *MockIUserRepository) FindByEmail(email domaincommon.Email) (UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockIUserRepositoryMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockIUserRepository)(nil).FindByEmail), email)
}

// FindByManyUserIds mocks base method.
func (m *MockIUserRepository) FindByManyUserIds(userIds []domaincommon.BaseUUID) ([]UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByManyUserIds", userIds)
	ret0, _ := ret[0].([]UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByManyUserIds indicates an expected call of FindByManyUserIds.
func (mr *MockIUserRepositoryMockRecorder) FindByManyUserIds(userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByManyUserIds", reflect.TypeOf((*MockIUserRepository)(nil).FindByManyUserIds), userIds)
}

// FindByPairId mocks base method.
func (m *MockIUserRepository) FindByPairId(pairId domaincommon.BaseUUID) ([]UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPairId", pairId)
	ret0, _ := ret[0].([]UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPairId indicates an expected call of FindByPairId.
func (mr *MockIUserRepositoryMockRecorder) FindByPairId(pairId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPairId", reflect.TypeOf((*MockIUserRepository)(nil).FindByPairId), pairId)
}

// FindByTeamId mocks base method.
func (m *MockIUserRepository) FindByTeamId(teamId domaincommon.BaseUUID) ([]UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByTeamId", teamId)
	ret0, _ := ret[0].([]UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByTeamId indicates an expected call of FindByTeamId.
func (mr *MockIUserRepositoryMockRecorder) FindByTeamId(teamId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByTeamId", reflect.TypeOf((*MockIUserRepository)(nil).FindByTeamId), teamId)
}

// FindByUserId mocks base method.
func (m *MockIUserRepository) FindByUserId(userId domaincommon.BaseUUID) (UserEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", userId)
	ret0, _ := ret[0].(UserEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockIUserRepositoryMockRecorder) FindByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockIUserRepository)(nil).FindByUserId), userId)
}

// Save mocks base method.
func (m *MockIUserRepository) Save(saveUesr UserEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", saveUesr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIUserRepositoryMockRecorder) Save(saveUesr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIUserRepository)(nil).Save), saveUesr)
}
